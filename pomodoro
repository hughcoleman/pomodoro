#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# pomodoro
# Copyright (c) 2020 Hugh Coleman
#
# This file is part of hughcoleman/pomodoro, a Pomodoro timer for the command
# line. It is released under the MIT License (see LICENSE.)

import sys
import argparse
import math
import time

import curses

class Pomodoro:
    """ class Pomodoro
    
    A Pomodoro timer, a time management tool that breaks long periods of
    time into "working" and "resting" blocks. """

    CLOCK = [list(l) for l in """
            ....           
        _d^^^^^^^^b_       
     .d''          ``b.    
   .p'                `q.  
  .d'                  `b. 
 .d'                    `b.
 ::                      ::
 ::       %H:%M:%S       ::
 ::                      ::
 `p.                    .q'
  `p.                  .q' 
   `b.%A.d'  
     `q..          ..p'    
        ^q........p^       
            ''''           
""".split("\n") if l.strip()]

    def render(self, screen):
        # compute h, m, s remaining
        m, s = divmod(self.durations[self.activity] - self.clock, 60)
        h, m = divmod(m, 60)

        # calculate percentage of completion
        percentage = self.clock / self.durations[self.activity]

        # the following variables are used, to allow the use of format
        # placeholders in the template.
        #  - y represents the current row being parsed
        #  - x represents the x-position of the current character
        #  - column represents the index into the row
        for y, row in enumerate(Pomodoro.CLOCK):
            column = 0
            x = 0
            while column < len(row):
                character = row[column]

                # compute the distance and angle (of this character) to the 
                # centre of the circle O(13.5, 7). angle is normalized to the
                # range [0, tau), where 0 is the vertical and increases in a
                # clockwise direction.
                theta = -math.atan2(x - 13.5, y - 7) + math.pi
                d = math.sqrt((x - 13.5)**2 + (y - 7)**2)

                # apply the templates - this is a really bad way to do this;
                # but it's "good enough" for this use-case.
                if (character == "%"):
                    specifier = row[column + 1]

                    character = {
                        "H": str(h).zfill(2), 
                        "M": str(m).zfill(2),
                        "S": str(s).zfill(2), 
                        "A": self.activity.upper().center(16)
                    }[specifier]

                    # skip the specifier
                    column = column + 1 

                _256color = curses.COLORS >= 256

                color = curses.color_pair(242 if _256color else 4)
                if d <= 3.5:
                    # ..then this is the timer
                    color = curses.color_pair(8 if _256color else 0)
                elif (x == 6) and (y == 11):
                    # ...then this is the activity indicator
                    color = curses.color_pair(221 if _256color else 7)
                elif theta <= (2 * math.pi * percentage):
                    # ...then this is part of the completed portion of the 
                    # circle
                    color = curses.color_pair(198 if _256color else 5)

                screen.addstr(y, x, character, color)
                column = column + 1
                x = x + len(character)

        # "hide" cursor
        y, x = screen.getmaxyx()
        screen.addstr(y - 2, x - 2, " ")

        # force stdout flush
        screen.refresh()

    def tick(self):
        # render the timer
        # self.render()
        self.clock = self.clock + 1
        
        # handle activity switches
        if self.clock >= self.durations[self.activity]:
            # flip current activity
            self.activity = {
                "work": "rest",
                "rest": "work"
            }[self.activity]

            # reset internal clock
            self.clock = 0
        
    def __init__(self, args):
        self.clock = 0

        self.durations = {
            "work": args.work * 60,
            "rest": args.rest * 60
        }
        self.activity = "work"
        
def main(screen):
    parser = argparse.ArgumentParser()

    parser.add_argument("-w", "--work", default=25, type=int,
            help="number of minutes of work")
    parser.add_argument("-r", "--rest", default=5, type=int,
            help="number of minutes of rest")

    args = parser.parse_args()

    # create Pomodoro timer instance
    timer = Pomodoro(args)

    # setup curses/terminal colours options
    curses.start_color()
    curses.use_default_colors()
    for i in range(curses.COLORS):
        if curses.COLORS < 256:
            # Windows?
            curses.init_color(i, 1000, 0, 0)
        curses.init_pair(i + 1, i, -1)

    # it's probably not a good idea to rely on curses' getch() timeout as a
    # timer, but it's good enough
    screen.timeout(1000)
    while True:
        timer.render(screen)
        timer.tick()

        # detect "esc" or "alt" keys
        if screen.getch() == 27:
            screen.addstr(16, 0, 
                    "Timer paused. Press `p` to resume, or `q` to quit. ")

            while True:
                key = screen.getch()
                if key == ord("p"):
                    break
                elif key == ord("q"):
                    return

            screen.clear()
        
    return

if __name__ == "__main__":
    curses.wrapper(main)
