#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# pomodoro
# Copyright (c) 2020 Hugh Coleman
#
# This file is part of hughcoleman/pomodoro, a Pomodoro timer for the command
# line. It is released under the MIT License (see LICENSE.)

import sys
import argparse
import math
import time

class Pomodoro:
    """ class Pomodoro
    
    A Pomodoro timer, a time management tool that breaks long periods of
    time into "working" and "resting" blocks. """

    CLOCK = [list(l) for l in """
            ....
        _d^^^^^^^^b_
     .d''          ``b.
   .p'                `q.
  .d'                  `b.
 .d'                    `b.
 ::                      ::
 ::       00:13:37       ::
 ::                      ::
 `p.                    .q'
  `p.                  .q'
   `b.      WORK      .d'
     `q..          ..p'
        ^q........p^
            ''''
""".split("\n") if l.strip()]

    def render(self, percentage=0.5):
        # move cursor to 0, 0 
        print("\u001b[0;0H", end="")

        for y, row in enumerate(Pomodoro.CLOCK):
            for x, char in enumerate(row):
                # compute the distance and angle (of this character) to the 
                # centre of the circle O(13.5, 7). angle is normalized to the
                # range [0, tau), where 0 is the vertical and increases in a
                # clockwise direction.
                theta = -math.atan2(x - 13.5, y - 7) + math.pi
                d = math.sqrt((x - 13.5)**2 + (y - 7)**2)

                if d <= 3.5:
                    # ..then this is the timer
                    print("\u001b[38;5;8m" + char + "\u001b[0m", end="")
                elif d <= 5:
                    # ...then this is the activity indicator
                    print("\u001b[38;5;221m" + char + "\u001b[0m", end="")
                elif theta <= (2 * math.pi * percentage):
                    # ...then this is part of the completed portion of the 
                    # circle
                    print("\u001b[38;5;198m" + char + "\u001b[0m", end="")
                else:
                    # ...then this is part of the incomplete portion of the
                    # circle
                    print("\u001b[38;5;242m" + char + "\u001b[0m", end="")
            
            print("")

        # force stdout flush
        sys.stdout.flush()

    def tick(self):
        pass

    def __init__(self, args):
        pass

if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument("-w", "--work", default=25, type=int,
            help="number of minutes of work")
    parser.add_argument("-r", "--rest", default=5, type=int,
            help="number of minutes of rest")

    args = parser.parse_args()

    # create Pomodoro timer instance
    timer = Pomodoro(args)
   
    # clear terminal and reset cursor
    print("\u001b[2J\u001b[0;0H")

    percentage = 0.0
    while True:
        try:
            timer.render(percentage=percentage)
            if percentage >= 1:
                break
            
            percentage = percentage + 0.05
            time.sleep(1)
        except KeyboardInterrupt:
            # if there's a KeyboardInterrupt, pause the Pomodoro timer. allow
            # the user to resume, or quit.
            action = input("\u001b[1000DPaused. (r)esume/(q)uit? ").lower()

            if (action in ["r", "resume"]):
                pass
            elif (action in ["q", "quit"]):
                sys.exit(0)
            else:
                raise RuntimeError("illegal selection")
